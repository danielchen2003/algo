/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */

var postorderTraversal = function(root,res=[]) {
    if(!root) return []

    const stack =[]
    stack.push(root)
    while(stack.length){
        let node =stack.pop()
        if(node){
            res.push(node.val)
       
        //往下走
        if(node.right){
            stack.push(node.right)
        }
        if(node.left){
            stack.push(node.left)
        } //哨兵
        
    }
    return res.reverse()
}






var postorderTraversal = function(root,res=[]) {
  if(!root)return res
  const stack=[]
  if(root) stack.push(root);
  while(stack.length){
    let node = stack.pop();
    if(node!==null){
      res.push(node.val)
      
      if(node.left){
        stack.push(node.left)
      }
      if(node.right){
        stack.push(node.right)
      }
      
    }
  }
  return res.reverse()
  
}



var postorderTraversal = function(root) {
    if(!root) return []
    const stack = [root]
    const res = []
    while(stack.length){
        p = stack.pop()
        res.push(p.val)
        if(p.left) stack.push(p.left)
        if(p.right) stack.push(p.right)

    }
    return res.reverse()
};
